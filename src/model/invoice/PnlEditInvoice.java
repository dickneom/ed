/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model.invoice;

import console.DknConsole;
import DknTime.DateTime;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import messages.VMessage;
import system.config.AppConfig;
import system.config.AppGlobal;
import system.config.ConfigData;
import model.contract.Contract;
import model.contract.ContractDAO;
import model.ente.Ente;
import model.ente.EnteDAO;
import model.item.Item;
import model.item.ItemDAO;
import model.item.Items;
import model.local.Local;
import model.local.LocalDAO;
import system.edit.PnlEdit;
import system.edit.WEdit;
import system.list.WList;
import system.window.WindowDAO;
import system.window.WindowData;

/**
 *
 * @author DickNeoM
 */
public class PnlEditInvoice extends PnlEdit {

    private final WEdit wEdit;
    private final int idInvoice;
    private Invoice invoice;
    private DefaultTableModel modelo;
    private int idLocal;
    private Color colorDefault;
    private Color colorCanceled;
    

    /**
     * Creates new form PnlEditInvoice
     * @param wEdit
     * @param id
     */
    public PnlEditInvoice(WEdit wEdit, int id) {
        initComponents();
        this.wEdit = wEdit;
        this.idInvoice = id;
        
        init();
        
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblNumber = new javax.swing.JLabel();
        txtSerie = new javax.swing.JTextField();
        txtNumber = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        jdcDate = new com.toedter.calendar.JDateChooser();
        lblId = new javax.swing.JLabel();
        chkCanceled = new javax.swing.JCheckBox();
        btnNumInvoice = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblClient = new javax.swing.JLabel();
        txtClient = new javax.swing.JTextField();
        btnClient = new javax.swing.JButton();
        lblContractCode = new javax.swing.JLabel();
        txtContractCode = new javax.swing.JTextField();
        lblLocal = new javax.swing.JLabel();
        txtLocal = new javax.swing.JTextField();
        lblContractPrice = new javax.swing.JLabel();
        txtContractPrice = new javax.swing.JTextField();
        lblContractDiscount = new javax.swing.JLabel();
        txtContractDiscount = new javax.swing.JTextField();
        lblContractDiscountDays = new javax.swing.JLabel();
        txtContractDiscountDays = new javax.swing.JTextField();
        lblContractDateInit = new javax.swing.JLabel();
        txtContractDateInit = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        lblItem = new javax.swing.JLabel();
        lblDateInit = new javax.swing.JLabel();
        jdcDateInit = new com.toedter.calendar.JDateChooser();
        cmbItem = new javax.swing.JComboBox<>();
        cmbMonth = new javax.swing.JComboBox<>();
        lblDateFinal = new javax.swing.JLabel();
        jdcDateFinal = new com.toedter.calendar.JDateChooser();
        cmbYear = new javax.swing.JComboBox<>();
        btnItemAdd = new javax.swing.JButton();
        btnItemDelete = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetail = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        lblObservations = new javax.swing.JLabel();
        txtObservations = new javax.swing.JTextField();
        lblSum = new javax.swing.JLabel();
        txtSum = new javax.swing.JTextField();
        lblDiscount = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JTextField();
        lblTaxes = new javax.swing.JLabel();
        txtTaxes = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setOpaque(false);

        lblNumber.setText("jLabel1");

        txtSerie.setText("jTextField1");

        txtNumber.setEditable(false);
        txtNumber.setText("jTextField2");

        lblDate.setText("jLabel2");

        jdcDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jdcDateFocusLost(evt);
            }
        });

        lblId.setText("jLabel1");

        chkCanceled.setText("jCheckBox1");
        chkCanceled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCanceledActionPerformed(evt);
            }
        });

        btnNumInvoice.setText("...");
        btnNumInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNumInvoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNumInvoice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                        .addComponent(chkCanceled)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblId))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdcDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDate, lblNumber});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumber)
                    .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId)
                    .addComponent(chkCanceled)
                    .addComponent(btnNumInvoice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate)
                    .addComponent(jdcDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setOpaque(false);

        lblClient.setText("jLabel1");

        txtClient.setEditable(false);
        txtClient.setText("jTextField1");

        btnClient.setText("...");
        btnClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientActionPerformed(evt);
            }
        });

        lblContractCode.setText("jLabel5");

        txtContractCode.setEditable(false);
        txtContractCode.setText("jTextField1");

        lblLocal.setText("jLabel2");

        txtLocal.setEditable(false);
        txtLocal.setText("jTextField1");

        lblContractPrice.setText("jLabel2");

        txtContractPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtContractPrice.setText("jTextField1");

        lblContractDiscount.setText("jLabel3");

        txtContractDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtContractDiscount.setText("jTextField1");

        lblContractDiscountDays.setText("jLabel4");

        txtContractDiscountDays.setEditable(false);
        txtContractDiscountDays.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtContractDiscountDays.setText("jTextField1");

        lblContractDateInit.setText("jLabel1");

        txtContractDateInit.setEditable(false);
        txtContractDateInit.setText("jTextField1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblContractCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtContractCode, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClient))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblClient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClient, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblLocal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblContractDateInit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtContractDateInit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblContractPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtContractPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblContractDiscount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtContractDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblContractDiscountDays)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtContractDiscountDays, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(244, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtContractDiscount, txtContractDiscountDays, txtContractPrice});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblClient, lblContractCode, lblContractDiscount, lblContractDiscountDays, lblContractPrice, lblLocal});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClient)
                    .addComponent(lblContractCode)
                    .addComponent(txtContractCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClient)
                    .addComponent(txtClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLocal)
                    .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContractDateInit)
                    .addComponent(txtContractDateInit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContractPrice)
                    .addComponent(txtContractPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContractDiscount)
                    .addComponent(txtContractDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContractDiscountDays)
                    .addComponent(txtContractDiscountDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblItem.setText("jLabel1");

        lblDateInit.setText("jLabel2");

        cmbItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthActionPerformed(evt);
            }
        });

        lblDateFinal.setText("jLabel3");

        cmbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearActionPerformed(evt);
            }
        });

        btnItemAdd.setText("jButton1");
        btnItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemAddActionPerformed(evt);
            }
        });

        btnItemDelete.setText("jButton1");
        btnItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblItem)
                    .addComponent(lblDateInit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jdcDateInit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblDateFinal)
                        .addGap(18, 18, 18)
                        .addComponent(jdcDateFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnItemAdd, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnItemDelete, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnItemAdd, btnItemDelete});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDateFinal, lblDateInit, lblItem});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblItem)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnItemAdd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcDateFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdcDateInit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnItemDelete)
                    .addComponent(lblDateInit)
                    .addComponent(lblDateFinal))
                .addContainerGap())
        );

        add(jPanel3);

        tblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDetail);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
        );

        add(jPanel6);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setOpaque(false);

        lblTotal.setText("jLabel4");

        txtTotal.setEditable(false);
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtTotal.setText("jTextField4");

        lblObservations.setText("jLabel1");

        txtObservations.setText("jTextField1");

        lblSum.setText("jLabel1");

        txtSum.setEditable(false);
        txtSum.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtSum.setText("jTextField1");

        lblDiscount.setText("jLabel2");

        txtDiscount.setEditable(false);
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtDiscount.setText("jTextField2");

        lblTaxes.setText("jLabel3");

        txtTaxes.setEditable(false);
        txtTaxes.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtTaxes.setText("jTextField3");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblObservations)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtObservations, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblSum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSum, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDiscount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTaxes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTaxes, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(64, 64, 64))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDiscount, lblSum, lblTaxes, lblTotal});

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtDiscount, txtSum, txtTaxes, txtTotal});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSum)
                    .addComponent(txtSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDiscount)
                    .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTaxes)
                    .addComponent(txtTaxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblObservations)
                    .addComponent(txtObservations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(jPanel4);

        jPanel5.setOpaque(false);

        btnOk.setText("jButton2");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setText("jButton1");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(555, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnOk});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );

        add(jPanel5);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        save();
        
        if (rowsAffected > 0) {
            this.ok = true;
            wEdit.dispose();
        }
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.ok = false;
        
        wEdit.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientActionPerformed
        selectContract();
    }//GEN-LAST:event_btnClientActionPerformed

    private void btnItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemAddActionPerformed
        addDetail();
    }//GEN-LAST:event_btnItemAddActionPerformed

    private void btnItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemDeleteActionPerformed
        deleteDetail();
    }//GEN-LAST:event_btnItemDeleteActionPerformed

    private void cmbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthActionPerformed
        changeDate();
    }//GEN-LAST:event_cmbMonthActionPerformed

    private void cmbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearActionPerformed
        changeDate();
    }//GEN-LAST:event_cmbYearActionPerformed

    private void btnNumInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNumInvoiceActionPerformed
        changeInvoiceNumber();
    }//GEN-LAST:event_btnNumInvoiceActionPerformed

    private void chkCanceledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCanceledActionPerformed
        activateButtons();
    }//GEN-LAST:event_chkCanceledActionPerformed

    private void jdcDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jdcDateFocusLost
        DknConsole.debug(Thread.currentThread().getStackTrace()[1].toString(), "Pierde el foco el date");
        double iva = invoice.getTax();
        
        invoice.setTax(AppGlobal.getIva(jdcDate.getDate()));
        
        if (iva != invoice.getTax() && invoice.getDetails().size() > 0) {
            for (InvoiceDetail iDetail : invoice.getDetails()) {
                try {
                    Item item = ItemDAO.get(iDetail.getIdItem());
                    
                    if (item != null && item.isHasTax()) {
                        iDetail.setTaxes(invoice.getTax());
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            showDetail();
        }
    }//GEN-LAST:event_jdcDateFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClient;
    private javax.swing.JButton btnItemAdd;
    private javax.swing.JButton btnItemDelete;
    private javax.swing.JButton btnNumInvoice;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox chkCanceled;
    private javax.swing.JComboBox<String> cmbItem;
    private javax.swing.JComboBox<String> cmbMonth;
    private javax.swing.JComboBox<String> cmbYear;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcDate;
    private com.toedter.calendar.JDateChooser jdcDateFinal;
    private com.toedter.calendar.JDateChooser jdcDateInit;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblContractCode;
    private javax.swing.JLabel lblContractDateInit;
    private javax.swing.JLabel lblContractDiscount;
    private javax.swing.JLabel lblContractDiscountDays;
    private javax.swing.JLabel lblContractPrice;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDateFinal;
    private javax.swing.JLabel lblDateInit;
    private javax.swing.JLabel lblDiscount;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblItem;
    private javax.swing.JLabel lblLocal;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblObservations;
    private javax.swing.JLabel lblSum;
    private javax.swing.JLabel lblTaxes;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblDetail;
    private javax.swing.JTextField txtClient;
    private javax.swing.JTextField txtContractCode;
    private javax.swing.JTextField txtContractDateInit;
    private javax.swing.JTextField txtContractDiscount;
    private javax.swing.JTextField txtContractDiscountDays;
    private javax.swing.JTextField txtContractPrice;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtLocal;
    private javax.swing.JTextField txtNumber;
    private javax.swing.JTextField txtObservations;
    private javax.swing.JTextField txtSerie;
    private javax.swing.JTextField txtSum;
    private javax.swing.JTextField txtTaxes;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    @Override
    protected final void init() {
        lblNumber.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_NUMBER_TEXT") + ":");
        lblDate.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_DATE_TEXT") + ":");
        chkCanceled.setText(AppGlobal.getText("WEDIT_INVOICE_CHK_CANCELED_TEXT"));
        
        lblContractCode.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_CONTRACTCODE_TEXT") + ":");
        
        lblClient.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_CLIENT_TEXT") + ":");
        
        lblLocal.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_LOCAL_TEXT") + ":");
        
        lblContractPrice.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_CONTRACTPRICE_TEXT") + ":");
        lblContractDiscount.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_CONTRACTDISCOUNT_TEXT") + ":");
        lblContractDiscountDays.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_CONTRACTDISCOUNTDAY_TEXT") + ":");
        lblContractDateInit.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_CONTRACTDATEINITI_TEXT") + ":");
        
        lblItem.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_ITEM_TEXT") + ":");
        lblDateInit.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_DATEINIT_TEXT") + ":");
        lblDateFinal.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_DATEFINAL_TEXT") + ":");

        btnItemAdd.setText(AppGlobal.getText("WEDIT_INVOICE_BTN_ITEMADD_TEXT"));
        btnItemDelete.setText(AppGlobal.getText("WEDIT_INVOICE_BTN_ITEMDELETE_TEXT"));
        
        lblSum.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_SUM_TEXT") + ":");
        lblDiscount.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_DISCOUNT_TEXT") + ":");
        lblTaxes.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_TAXES_TEXT") + ":");
        lblTotal.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_TOTAL_TEXT") + ":");
        
        lblObservations.setText(AppGlobal.getText("WEDIT_INVOICE_LBL_OBSERVATIONS_TEXT") + ":");
        
        btnOk.setText(AppGlobal.getText("WEDIT_BTN_OK"));
        btnCancel.setText(AppGlobal.getText("WEDIT_BTN_CANCEL"));
        
        Items items = null;
        try {
            items = ItemDAO.gets("name");
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        cmbItem.removeAllItems();
        for (Item item : items) {
            cmbItem.addItem(item.getName());
        }
        
        cmbMonth.removeAllItems();
        for (DateTime.Month m : DateTime.Month.values()) {
            cmbMonth.addItem(m.toString());
        }
        
        cmbYear.removeAllItems();
        for (int year = AppConfig.getInt(ConfigData.INVOICES_YEAR_INIT); year <= AppConfig.getInt(ConfigData.INVOICES_YEAR_FINAL); year++) {
            cmbYear.addItem(String.valueOf(year));
        }
        
        jdcDate.setDateFormatString(AppGlobal.getFormatDate());
        jdcDateInit.setDateFormatString(AppGlobal.getFormatDate());
        jdcDateFinal.setDateFormatString(AppGlobal.getFormatDate());
        
        modelo = (DefaultTableModel) tblDetail.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        modelo.addColumn("id");
        modelo.addColumn("cant");
        modelo.addColumn("item");
        modelo.addColumn("local");
        modelo.addColumn("mes");
        modelo.addColumn("año");
        modelo.addColumn("precio");
        modelo.addColumn("desc.");
        modelo.addColumn("total");
        modelo.addColumn("imp");
        modelo.addColumn("X");
        
        colorDefault = this.getBackground();
        colorCanceled = new Color(255,100,100);
    }
    
    
    
    
    @Override
    public final void loadData() {
        lblId.setText(String.valueOf(idInvoice));
        if (idInvoice < 0) {
            // nuevo (crear)
            invoice = new Invoice();
            
            invoice.setSerie(AppConfig.getString(ConfigData.INVOICES_SERIE));
            try {
                invoice.setNumber(AppGlobal.getNextInvoiceNumber());
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            invoice.setDate(DateTime.getNow());
            
            invoice.setIdContract(-1);
            
            invoice.setTax(AppGlobal.getIva(invoice.getDate()));
            invoice.setIdType(1);
            invoice.setCanceled(false);
            invoice.setObservations("");
        }
        else {
            // Modificar
            try {
                invoice = InvoiceDAO.get(idInvoice);
            } catch (ClassNotFoundException | SQLException | ParseException ex) {
                DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), " ERROR. PnlEditInvoice.loadData(). No se puedo cargar la factura");
                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        showData();
        activateButtons();
        changeDate = true;
    }

    @Override
    protected void showData() {
        lblTaxes.setText(lblTaxes.getText() + " " + invoice.getTax() + "%:");
        txtSerie.setText(invoice.getSerie());
        txtNumber.setText(getNumber(invoice.getNumber(), AppConfig.getInt(ConfigData.INVOICES_NUMBER_TAM)));
        jdcDate.setDate(invoice.getDate());
        chkCanceled.setSelected(invoice.isCanceled());
        
        if (invoice.getIdContract() < 0) {
            txtContractCode.setText("Sin contrato");
            txtClient.setText("Sin Cliente");
            txtLocal.setText("Sin Local");
            txtContractPrice.setText("0.00");
            txtContractDiscount.setText("0.00");
            txtContractDiscountDays.setText("0");
            txtContractDateInit.setText("");
        }
        else {
            try {
                Contract contract = ContractDAO.get(invoice.getIdContract());
                txtContractCode.setText(contract.getCode());

                Ente client = EnteDAO.get(contract.getIdCustomer());
                txtClient.setText(client.getDni() + " - " + client.getFullName());

                Local local = LocalDAO.get(contract.getIdLocal());
                txtLocal.setText(local.getCode());
                idLocal = contract.getIdLocal();

                txtContractPrice.setText(AppGlobal.getFormatDecimalShort().format(contract.getRent()));
                txtContractDiscount.setText(AppGlobal.getFormatDecimalShort().format(contract.getDiscount()));
                txtContractDiscountDays.setText(String.valueOf(contract.getDiscountDays()));
                txtContractDateInit.setText(DateTime.getDateUtilToString(contract.getDateInit(), AppGlobal.getFormatDate()));
            } catch (ClassNotFoundException | SQLException | ParseException ex) {
                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        Date date = DateTime.getNow();
        int month = DateTime.getMonth(date);
        cmbMonth.setSelectedItem(DateTime.Month.getMonth(month).toString());

        int year = DateTime.getYear(date);
        cmbYear.setSelectedItem(String.valueOf(year));

        jdcDateInit.setDate(DateTime.getDateFisrtDayMonth(month, year));
        jdcDateFinal.setDate(DateTime.getDateLastDayMonth(month, year));

        showDetail();
        
        txtObservations.setText("");
    }
    
    /**
     * Devuelve un <code>String</code> con el numero de factura, rellenando
     * con ceros "0" antes del numero hasta cumplir con el tamaño del número de factura.
     * @param number
     * @return 
     */
    private String getNumber(int number, int tam) {
        String numberStr = String.valueOf(number);
        
        while (numberStr.length() < tam) {
            numberStr = "0" + numberStr;
        }
        
        return numberStr;
    }
    
    private void showDetail() {
        modelo.setRowCount(0);
        double suma = 0, disc = 0, impu = 0;
        if (invoice.getDetails().size() > 0) {

            for (InvoiceDetail iDetail : invoice.getDetails()) {
                Object[] row = new Object[11];

                row[0] = iDetail.getId();
                row[1] = iDetail.getQuantity();
                
                Item item = null;
                try {
                    item = ItemDAO.get(iDetail.getIdItem());
                } catch (ClassNotFoundException | SQLException ex) {
                    DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "Item no encontrado. Id: " + iDetail.getIdItem());
                    Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (item != null) {
                    row[2] = item.getName();
                }
                
                Local local = null;
                try {
                    local = LocalDAO.get(iDetail.getIdLocal());
                } catch (ClassNotFoundException | SQLException ex) {
                    DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "Local no encontrado. Id: " + iDetail.getIdLocal());
                    Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (local != null) {
                    row[3] = local.getCode();
                }
                
                row[4] = DateTime.Month.getMonth(iDetail.getMonth());
                row[5] = iDetail.getYear();
                row[6] = iDetail.getPrice();
                row[7] = iDetail.getDiscount();
                double importe = iDetail.getQuantity() * (iDetail.getPrice() - iDetail.getDiscount());
                row[8] = importe;
                double tax = importe * iDetail.getTaxes() / 100;
                row[9] = tax;
                row[10] = iDetail.isDeleted();
                
                if (!iDetail.isDeleted()) {
                    suma += iDetail.getPrice() * iDetail.getQuantity();
                    disc += iDetail.getDiscount() * iDetail.getQuantity();
                    impu += tax;
                }
                modelo.addRow(row);
            }
        }
        
        txtSum.setText(AppGlobal.getFormatDecimalShort().format(suma));
        txtDiscount.setText(AppGlobal.getFormatDecimalShort().format(disc));
        txtTaxes.setText(AppGlobal.getFormatDecimalShort().format(impu));
        txtTotal.setText(AppGlobal.getFormatDecimalShort().format(suma - disc + impu));
        
        activateButtons();
    }
    
    /**
     * Activa los botones de agregar y borrar registros del detalle si se ha seleccionado un contrato,
     * caso contrario los descativa.
     */
    public void activateButtons() {
        if (invoice.getIdContract() > 0) {
            btnItemAdd.setEnabled(true);
            btnOk.setEnabled(true);
        }
        else {
            btnItemAdd.setEnabled(false);
            if (chkCanceled.isSelected()) {
                btnOk.setEnabled(true);
            }
            else {
                btnOk.setEnabled(false);
            }
        }
        if (tblDetail.getRowCount() > 0) {
            btnItemDelete.setEnabled(true);
        }
        else {
            btnItemDelete.setEnabled(false);
        }
        if (chkCanceled.isSelected()) {
            this.setBackground(colorCanceled);
        }
        else {
            this.setBackground(colorDefault);
        }
    }
    
    
    
    @Override
    protected void save() {
        boolean insert = invoice.getId() < 0;
        invoice.setDate(jdcDate.getDate());
        invoice.setCanceled(chkCanceled.isSelected());
        invoice.setObservations(txtObservations.getText());
        
        String error = null;
        try {
            error = InvoiceDAO.validate(invoice);
        } catch (ClassNotFoundException | SQLException | ParseException ex) {
            Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (error == null) {
            try {
                rowsAffected = InvoiceDAO.update(invoice);
            } catch (ClassNotFoundException | SQLException | ParseException ex) {
                JOptionPane.showMessageDialog(wEdit, AppGlobal.getText("WEDIT_INVOICE_MSG_ERROR_NOREGISTER_TEXT"), AppGlobal.getText("WMSG_ERROR_TITLE"), JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(wEdit, error, AppGlobal.getText("WMSG_ERROR_TITLE"), JOptionPane.WARNING_MESSAGE);
        }
        if (rowsAffected > 0) {
            try {
                if (insert) {
                    AppGlobal.setLastInvoiceNumber(invoice.getNumber());
                }
            } catch (ClassNotFoundException | SQLException ex) {
                DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "No se puedo registrar el último número de factura");
                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    
    
    
    
    
    
    // EDICION DE LA FACTURA
    private void selectContract() {
        WindowData window = null;
        try {
            window = (WindowData) WindowDAO.getWindow("WSEARCH_CONTRACTS");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        WList w = new WList(wEdit, window);
        w.setVisible(true);
        if (w.isOk()) {
            try {
                int idContr = w.getIdSelected();
                Contract contract = ContractDAO.get(idContr);
                if (contract != null) {
                    if (!contract.isActive()) {
                        DknConsole.warning(Thread.currentThread().getStackTrace()[1].toString(), "El contrato esta inactivo.");
                        JOptionPane.showMessageDialog(wEdit, AppGlobal.getText("WEDIT_INVOICE_MSG_ERROR_CONTRATINACTIVE_TEXT"), AppGlobal.getText("WMSG_WARNING_TITLE"), JOptionPane.WARNING_MESSAGE);
                    }
                        
                    Date date = jdcDate.getDate();
                    if(date.before(contract.getDateInit())) {
                        DknConsole.warning(Thread.currentThread().getStackTrace()[1].toString(), "La fecha de la factura es anterior que la fecha de inicio del contracto.");
                        JOptionPane.showMessageDialog(wEdit, AppGlobal.getText("WEDIT_INVOICE_MSG_ERROR_DATEBEFORE_TEXT"), AppGlobal.getText("WMSG_WARNING_TITLE"), JOptionPane.WARNING_MESSAGE);
                    }
                    if(contract.getDateFinish() != null && date.after(contract.getDateFinish())) {
                        DknConsole.warning(Thread.currentThread().getStackTrace()[1].toString(), "La fecha de la factura es posterior que la fecha de terminación del contracto.");
                        JOptionPane.showMessageDialog(wEdit, AppGlobal.getText("WEDIT_INVOICE_MSG_ERROR_DATEAFTER_TEXT"), AppGlobal.getText("WMSG_WARNING_TITLE"), JOptionPane.WARNING_MESSAGE);
                    }
                    invoice.setIdContract(idContr);
                    
                    selectClient(contract.getIdCustomer());
                    
                    selectLocal(contract.getIdLocal());
                    
                    txtContractCode.setText(contract.getCode());
                    txtContractPrice.setText(AppGlobal.getFormatDecimalShort().format(contract.getRent()));
                    txtContractDiscount.setText(AppGlobal.getFormatDecimalShort().format(contract.getDiscount()));
                    txtContractDiscountDays.setText(String.valueOf(contract.getDiscountDays()));
                    txtContractDateInit.setText(DateTime.getDateUtilToString(contract.getDateInit(), AppGlobal.getFormatDate()));
                    
                    
                    
                    
                    
                    DknConsole.debug(Thread.currentThread().getStackTrace()[1].toString(), "Verificar IVA");
                    double iva = invoice.getTax();
                    
                    invoice.setTax(AppGlobal.getIva(jdcDate.getDate()));
                    
                    if (iva != invoice.getTax() && invoice.getDetails().size() > 0) {
                        for (InvoiceDetail iDetail : invoice.getDetails()) {
                            try {
                                Item item = ItemDAO.get(iDetail.getIdItem());

                                if (item != null && item.isHasTax()) {
                                    iDetail.setTaxes(invoice.getTax());
                                }
                            } catch (ClassNotFoundException | SQLException ex) {
                                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        showDetail();
                    }
                }
            } catch (ClassNotFoundException | SQLException | ParseException ex) {
                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "NO es OK (La busqueda del contrato se canceló).");
        }
        
        activateButtons();
    }
    
    private void selectClient(int idClient) throws ClassNotFoundException, SQLException {
        Ente client = EnteDAO.get(idClient);
        if (client != null) {
            txtClient.setText(client.getDni() + " - " + client.getSurname() + " " + client.getName());
        }
        else {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "Cliente no encontrado: id: " + idClient);
        }
    }
    
    /**
     * Selecciona los datos de un local y los muestra en la ventana.<br>
     * Tambien asigna el valor del id del local a una variable de nivel clase.<br>
     * Es parte del metodo <code>selectContract</code>:
     * @param idLoc id del local que se seleccionara
     * @throws ClassNotFoundException
     * @throws SQLException 
     */
    private void selectLocal(int idLoc) throws ClassNotFoundException, SQLException {
        Local local = LocalDAO.get(idLoc);
        if (local != null) {
            txtLocal.setText(local.getCode());
            idLocal = idLoc;
        }
        else {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "Local no encontrado: id: " + idLocal);
            idLocal = -1;
        }
    }
    
    
    
    private boolean changeDate = false;
    private void changeDate() {
        if (changeDate && cmbMonth.getItemCount() > 0 && cmbYear.getItemCount() > 0) {
            String monthStr = (String) cmbMonth.getSelectedItem();
            int month = 0;
            for (DateTime.Month m : DateTime.Month.values()) {
                if (monthStr.equals(m.toString())) {
                    month = DateTime.Month.getMonth(m);
                    break;
                }
            }
            int year = Integer.parseInt((String) cmbYear.getSelectedItem());
            jdcDateInit.setDate(DateTime.getDateFisrtDayMonth(month, year));
            jdcDateFinal.setDate(DateTime.getDateLastDayMonth(month, year));
        }
    }

    private void changeInvoiceNumber() {
        String numberStr = null;
        try {
            numberStr = JOptionPane.showInputDialog(wEdit, "Ingrese numero de factura", AppGlobal.getNextInvoiceNumber());
        } catch (ClassNotFoundException | SQLException ex) {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "No se pudo obtener el número de factura desde la base de datos.");
            Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (numberStr != null) {
            String serie = txtSerie.getText();
            int number = Integer.parseInt(numberStr);
            
            try {
                if (InvoiceDAO.getByNumber(serie, number) != null) {
                    VMessage.show(wEdit, "Este número de factura ya esta emitido.", "Mensaje");
                }
            } catch (ClassNotFoundException | SQLException | ParseException ex) {
                Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
            txtNumber.setText(getNumber(number, AppConfig.getInt(ConfigData.INVOICES_NUMBER_TAM)));
            invoice.setNumber(number);
        }
        else {
            JOptionPane.showMessageDialog(wEdit, AppGlobal.getText("WEDIT_INVOICE_MSG_ERROR_NOCHANGEINVOICENUMBER_TEXT"), AppGlobal.getText("WMSG_ERROR_TITLE"), JOptionPane.WARNING_MESSAGE);
        }
    }

    

    
    
    
    
    
    private void addDetail() {
        DknConsole.debug(Thread.currentThread().getStackTrace()[1].toString(), "Verificar IVA");
        double iva = invoice.getTax();

        invoice.setTax(AppGlobal.getIva(jdcDate.getDate()));

        if (iva != invoice.getTax() && invoice.getDetails().size() > 0) {
            for (InvoiceDetail iDetail : invoice.getDetails()) {
                try {
                    Item item = ItemDAO.get(iDetail.getIdItem());

                    if (item != null && item.isHasTax()) {
                        iDetail.setTaxes(invoice.getTax());
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            showDetail();
        }




        
        InvoiceDetail detail = new InvoiceDetail();
        
        detail.setId(-1);
        detail.setIdInvoice(idInvoice);
        detail.setIdLocal(idLocal);
        
        double quantity = 1;
        detail.setQuantity(quantity);
        
        int idItem = -1;
        String itemStr = (String) cmbItem.getSelectedItem();
        Item item = null;
        try {
            item = ItemDAO.get("name", itemStr);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PnlEditInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (item != null) {
            idItem = item.getId();
        }
        else {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "Item no encontrado. Name: " + itemStr);
        }
        detail.setIdItem(idItem);
        
        String monthStr = (String) cmbMonth.getSelectedItem();
        int month = 0;
        for (DateTime.Month m : DateTime.Month.values()) {
            if (monthStr.equals(m.toString())) {
                month = DateTime.Month.getMonth(m);
                break;
            }
        }
        detail.setMonth(month);
        
        String yearStr = (String) cmbYear.getSelectedItem();
        int year = Integer.parseInt(yearStr);
        detail.setYear(year);
        
        detail.setPrice(Double.parseDouble(txtContractPrice.getText()));
        detail.setDiscount(Double.parseDouble(txtContractDiscount.getText()));
        double tax = 0;
        if (item != null && item.isHasTax()) {
            tax = invoice.getTax();
        }
        detail.setTaxes(tax);
        
        detail.setDateInit(jdcDateInit.getDate());
        detail.setDateFinal(jdcDateFinal.getDate());
        detail.setDescription("");  // Modificar para una descripcion mas acorde.
        
        invoice.getDetails().add(detail);
        
        showDetail();
    }
    
    private void deleteDetail() {
        int rowSelected = tblDetail.getSelectedRow();
        
        if (rowSelected >= 0) {
            if (invoice.getDetail(rowSelected).isDeleted()) {
                invoice.getDetail(rowSelected).setDeleted(false);
            }
            else {
                invoice.getDetail(rowSelected).setDeleted(true);
            }
        }
        else {
            JOptionPane.showMessageDialog(this, AppGlobal.getText("WLIST_MSG_ERROR_NOREGISTERSELECT_TEXT"),
                    AppGlobal.getText("WMSG_ERROR_TITLE"), JOptionPane.WARNING_MESSAGE);
        }
        
        showDetail();
    }

    
    
}
    
