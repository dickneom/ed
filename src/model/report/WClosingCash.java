/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model.report;

import DknFile.Archivo;
import DknFile.Excel;
import DknTime.DateTime;
import console.DknConsole;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import messages.VError;
import system.config.AppGlobal;
import system.data.DAOSQL;
import system.window.WindowData;
import table.FormatoTabla;


/**
 *
 * @author DickNeoM
 */
public class WClosingCash extends javax.swing.JDialog {
    private DefaultTableModel model;
    private String sqlReporte;

    /**
     * Creates new form VCierreCaja
     * @param parent
     * @param modal
     * @param window
     */
    public WClosingCash(java.awt.Frame parent, boolean modal, WindowData window) {
        super(parent, modal);
        initComponents();
        
        this.model = null;
        
        setTitle(window.getTitle());
        setLocationRelativeTo(parent);
        
        init();
    }
    
    private void init() {
        lblRange.setText(AppGlobal.getText("WREPORT_CLOSINGCASH_LBL_RANGE_TEXT"));
        
        btnToPdf.setText(AppGlobal.getText("WREPORT_CLOSINGCASH_BTN_TOPDF_TEXT"));
        btnToExcel.setText(AppGlobal.getText("WREPORT_CLOSINGCASH_BTN_TOEXCEL_TEXT"));
        btnGenerate.setText(AppGlobal.getText("WREPORT_CLOSINGCASH_BTN_GENERATE_TEXT"));
        btnClose.setText(AppGlobal.getText("WREPORT_CLOSINGCASH_BTN_CLOSE_TEXT"));
        
        
        jdcFechaDesde.setDateFormatString(AppGlobal.getFormatDate());
        jdcFechaHasta.setDateFormatString(AppGlobal.getFormatDate());
        jdcFechaDesde.setDate(DateTime.getNow());
        jdcFechaHasta.setDate(DateTime.getNow());
        
        model = (DefaultTableModel) tblCierreCaja.getModel();
        tblCierreCaja.setDefaultRenderer(Object.class, new FormatoTabla());
        model.setRowCount(0);
        
        cmbPeriodo.removeAllItems();
        cmbPeriodo.addItem("Hoy");
        cmbPeriodo.addItem("Ayer");
        cmbPeriodo.addItem("Ultima semana");
        cmbPeriodo.addItem("Este mes");
        cmbPeriodo.addItem("Mes anterior");
        cmbPeriodo.addItem("Este a√±o");
        cmbPeriodo.addItem("A futuro");
        cmbPeriodo.addItem("Enero");
        cmbPeriodo.addItem("Febrero");
        cmbPeriodo.addItem("Marzo");
        cmbPeriodo.addItem("Abril");
        cmbPeriodo.addItem("Mayo");
        cmbPeriodo.addItem("Junio");
        cmbPeriodo.addItem("Julio");
        cmbPeriodo.addItem("Agosto");
        cmbPeriodo.addItem("Septiembre");
        cmbPeriodo.addItem("Octubre");
        cmbPeriodo.addItem("Noviembre");
        cmbPeriodo.addItem("Diciembre");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblRange = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        btnToExcel = new javax.swing.JButton();
        btnToPdf = new javax.swing.JButton();
        cmbPeriodo = new javax.swing.JComboBox();
        jdcFechaDesde = new com.toedter.calendar.JDateChooser();
        jdcFechaHasta = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        txtTotalFacturas = new javax.swing.JTextField();
        txtTotalDocs = new javax.swing.JTextField();
        txtTotalAbonos = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlCierreCaja = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCierreCaja = new javax.swing.JTable();
        pnlDepPendientes = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDepPendientes = new javax.swing.JTable();
        pnlDepSaldo = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDepSaldo = new javax.swing.JTable();
        pnlFactSaldo = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblFacSaldo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblRange.setText("Rango:");

        btnClose.setText("Cerrar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generar");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnToExcel.setText("Excel");
        btnToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToExcelActionPerformed(evt);
            }
        });

        btnToPdf.setText("PDF");

        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPeriodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdcFechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdcFechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(btnToPdf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnToExcel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGenerate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdcFechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdcFechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRange)
                        .addComponent(btnClose)
                        .addComponent(btnGenerate)
                        .addComponent(btnToExcel)
                        .addComponent(btnToPdf)
                        .addComponent(cmbPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        txtTotalFacturas.setEditable(false);
        txtTotalFacturas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtTotalDocs.setEditable(false);
        txtTotalDocs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtTotalAbonos.setEditable(false);
        txtTotalAbonos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel2.setText("Total Factura:");

        jLabel3.setText("Total Documentos:");

        jLabel4.setText("Total Abonos:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalFacturas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalDocs, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalAbonos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(198, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtTotalAbonos, txtTotalDocs, txtTotalFacturas});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalFacturas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalDocs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalAbonos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        tblCierreCaja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCierreCaja);

        javax.swing.GroupLayout pnlCierreCajaLayout = new javax.swing.GroupLayout(pnlCierreCaja);
        pnlCierreCaja.setLayout(pnlCierreCajaLayout);
        pnlCierreCajaLayout.setHorizontalGroup(
            pnlCierreCajaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
        );
        pnlCierreCajaLayout.setVerticalGroup(
            pnlCierreCajaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Cierre de Caja", pnlCierreCaja);

        tblDepPendientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblDepPendientes);

        javax.swing.GroupLayout pnlDepPendientesLayout = new javax.swing.GroupLayout(pnlDepPendientes);
        pnlDepPendientes.setLayout(pnlDepPendientesLayout);
        pnlDepPendientesLayout.setHorizontalGroup(
            pnlDepPendientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
        );
        pnlDepPendientesLayout.setVerticalGroup(
            pnlDepPendientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Depositos Pendientes", pnlDepPendientes);

        tblDepSaldo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblDepSaldo);

        javax.swing.GroupLayout pnlDepSaldoLayout = new javax.swing.GroupLayout(pnlDepSaldo);
        pnlDepSaldo.setLayout(pnlDepSaldoLayout);
        pnlDepSaldoLayout.setHorizontalGroup(
            pnlDepSaldoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
        );
        pnlDepSaldoLayout.setVerticalGroup(
            pnlDepSaldoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Depositos con Saldo", pnlDepSaldo);

        tblFacSaldo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tblFacSaldo);

        javax.swing.GroupLayout pnlFactSaldoLayout = new javax.swing.GroupLayout(pnlFactSaldo);
        pnlFactSaldo.setLayout(pnlFactSaldoLayout);
        pnlFactSaldoLayout.setHorizontalGroup(
            pnlFactSaldoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
        );
        pnlFactSaldoLayout.setVerticalGroup(
            pnlFactSaldoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Facturas con Saldo", pnlFactSaldo);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Generar Cierre de Caja.");
        String fechaDesde;
        String fechaHasta;
        
        if (jdcFechaDesde.getDate() == null || jdcFechaHasta.getDate() == null) {
            VError.show(this, "Las fechas no pueden estar vacias");
            return;
        }
        else {
            fechaDesde = DateTime.getDateUtilToString(jdcFechaDesde.getDate(), AppGlobal.getFormatDate());
            fechaHasta = DateTime.getDateUtilToString(jdcFechaHasta.getDate(), AppGlobal.getFormatDate());
        }
        
        try {
            generarCierreCaja(fechaDesde, fechaHasta);
            generarDepPendientes(fechaHasta);
            generarDepSaldo(fechaHasta);
            generarFactSaldo(fechaHasta);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(WClosingCash.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void generarCierreCaja(String fechaDesde, String fechaHasta) throws ClassNotFoundException, SQLException {
        String reportCode = "CLOSINGCASH";
        String sqlRep = getSql(reportCode);

        if (sqlRep == null) {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "No se encontr√≥ el reporte. C√≥digo: " + reportCode);
            return;
        }
        sqlRep += " WHERE date BETWEEN '" + fechaDesde + "' AND '" + fechaHasta + "'";
        sqlRep += " ORDER BY date";
        DknConsole.debug(Thread.currentThread().getStackTrace()[1].toString(), "Reportes Cierre de Caja. Sql: " + sqlRep);
        
        double sumFactura = 0.0, sumDocumento = 0.0, sumAbono = 0.0;
        try (Connection con = DAOSQL.getConection(AppGlobal.getDataBase());
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(sqlRep)) {
            
            int numCols = rs.getMetaData().getColumnCount();
            model.setColumnCount(0);
            for (int i=0; i<numCols; i++) {
                model.addColumn(rs.getMetaData().getColumnName(i+1));
            }

            model.setRowCount(0);
            while (rs.next()) {
                Object[] fila = new Object[numCols];

                for (int i=0; i<numCols; i++) {
                    fila[i] = rs.getObject(i+1);
                }

                sumFactura += rs.getDouble("factotal");
                sumDocumento += rs.getDouble("payvalue");
                sumAbono += rs.getDouble("value");

                model.addRow(fila);
            }
        }

        txtTotalFacturas.setText(AppGlobal.getFormatDecimalShort().format(sumFactura));
        txtTotalDocs.setText(AppGlobal.getFormatDecimalShort().format(sumDocumento));
        txtTotalAbonos.setText(AppGlobal.getFormatDecimalShort().format(sumAbono));
    }
    
    /**
     * Busca en la tabla <code>report</code> la instucci√≥n sql.
     * @param code c√≥digo del reporte.
     * @return 
     */
    private String getSql(String code) {
        String sqlRep = null;
        String sql = "SELECT * FROM vreport WHERE code = '" + code + "'";
        
        try (Connection con = DAOSQL.getConection(AppGlobal.getDataBase());
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            
            sqlRep = rs.getString("sql");
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(WClosingCash.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return sqlRep;
    }
    
    private void generarDepPendientes(String dateFinal) throws ClassNotFoundException, SQLException {
        String reportCode = "BANKTRANS_NOTUSED";
        String sqlRep = getSql(reportCode);

        if (sqlRep != null) {
            sqlRep = sqlRep.replace("FECHA_HASTA", dateFinal);
            DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Reporte de depositos pendientes Sql: " + sqlRep);
            
            try (Connection con = DAOSQL.getConection(AppGlobal.getDataBase());
                    Statement stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery(sqlRep)) {
                
                fillTable((DefaultTableModel) tblDepPendientes.getModel(), rs);
            }
        }
        else {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "No se encontr√≥ el reporte. C√≥digo:" + reportCode);
        }
    }
    
    private void generarDepSaldo(String dateFinal) throws ClassNotFoundException, SQLException {
        String reportCode = "BANKTRANS_WITH_BALANCE";
        String sqlRep = getSql(reportCode);

        if (sqlRep != null) {
            sqlRep = sqlRep.replace("FECHA_HASTA", dateFinal);
            DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Reporte de depositos con saldo. Sql: " + sqlRep);
            
            try (Connection con = DAOSQL.getConection(AppGlobal.getDataBase());
                    Statement stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery(sqlRep)) {
                
                fillTable((DefaultTableModel) tblDepSaldo.getModel(), rs);
            }
        }
        else {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "No se encontr√≥ el reporte. C√≥digo:" + reportCode);
        }
    }
    
    private void generarFactSaldo(String dateFinal) throws ClassNotFoundException, SQLException {
        String reportCode = "INVOICE_WITH_BALANCE";
        String sqlRep = getSql(reportCode);

        if (sqlRep != null) {
            sqlRep = sqlRep.replace("FECHA_HASTA", dateFinal);
            DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Reporte de depositos con saldo. Sql: " + sqlRep);
            
            try (Connection con = DAOSQL.getConection(AppGlobal.getDataBase());
                    Statement stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery(sqlRep)) {
                
                fillTable((DefaultTableModel) tblFacSaldo.getModel(), rs);
            }
        }
        else {
            DknConsole.error(Thread.currentThread().getStackTrace()[1].toString(), "No se encontr√≥ el reporte. C√≥digo:" + reportCode);
        }
    }
    
    private void fillTable(DefaultTableModel model, ResultSet rs) throws SQLException {
        int numCols = rs.getMetaData().getColumnCount();
        
        model.setColumnCount(0);
        for (int i=0; i<numCols; i++) {
            model.addColumn(rs.getMetaData().getColumnName(i+1));
        }
        
        model.setRowCount(0);
        while (rs.next()) {
            Object[] fila = new Object[numCols];
            
            for (int i=0; i<numCols; i++) {
                fila[i] = rs.getObject(i+1);
            }
                
            model.addRow(fila);
        }
    }
    
    
    private void btnToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToExcelActionPerformed
        DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Enviando a excel el Cierre de Caja.");
        
        
        if (jdcFechaDesde.getDate() == null || jdcFechaHasta.getDate() == null) {
            VError.show(this, "Las fechas no pueden estar vacias.");
            return;
        }

        String sqlRep;
        
        String fechaDesde = DateTime.getDateUtilToString(jdcFechaDesde.getDate(), AppGlobal.getFormatDate());
        String dateFinal = DateTime.getDateUtilToString(jdcFechaHasta.getDate(), AppGlobal.getFormatDate());
        
        File fileXls = Archivo.obtenerArchivo(this, ".xls", AppGlobal.getDirWorking(), Archivo.OpenMode.WRITE);
        AppGlobal.setDirWorking(Archivo.getRuta(fileXls));
        
        boolean exportado = true;
        if (fileXls != null) {
            try {
                Excel e = new Excel(fileXls);
                
                // Exportando Cierre de Caja
                String reportCode = "CLOSINGCASH";
                sqlRep = getSql(reportCode);

                sqlRep += " WHERE date BETWEEN '" + fechaDesde + "' AND '" + dateFinal + "'";
                sqlRep += " ORDER BY date";
                DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Exportando a Excel. Cierre de Caja. Sql: " + sqlRep + "...");

                String nombreHoja = "Cierre";
                String titulo = "Cierre de Caja";
                String subtitulo = "Desde: " + fechaDesde + " hasta: " + dateFinal;
                Connection con = DAOSQL.getConection(AppGlobal.getDataBase());
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(sqlRep);
                
                if (!e.addResultSetAExcel(rs, nombreHoja, titulo, subtitulo)) {
                    exportado = false;
                    DknConsole.msgIsOk(false);
                }
                else {
                    DknConsole.msgIsOk(true);
                }
                
                
                // Reporte de depositos con saldo hasta la fecha indicada"
                reportCode = "BANKTRANS_WITH_BALANCE";
                sqlRep = getSql(reportCode);

                sqlRep = sqlRep.replace("FECHA_HASTA", dateFinal);
                DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Exportando a Excel. Depositos con saldo. Sql: " + sqlRep + "...");

                nombreHoja = "Dep Saldo";
                titulo = "Depositos con Saldo";
                subtitulo = "Hasta: " + dateFinal;
                
                rs = stmt.executeQuery(sqlRep);
                if (!e.addResultSetAExcel(rs, nombreHoja, titulo, subtitulo)) {
                    exportado = false;
                    DknConsole.msgIsOk(false);
                }
                else {
                    DknConsole.msgIsOk(true);
                }
                
                
                // Reporte de depositos pendientes hasta la fecha indicada
                reportCode = "BANKTRANS_NOTUSED";
                sqlRep = getSql(reportCode);

                sqlRep = sqlRep.replace("FECHA_HASTA", dateFinal);
                DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Exportando a Excel. Depositos pendientes. Sql: " + sqlRep + "...");

                nombreHoja = "Dep Pendientes";
                titulo = "Depositos Pendientes";
                subtitulo = "Hasta: " + dateFinal;
                
                rs = stmt.executeQuery(sqlRep);
                if (!e.addResultSetAExcel(rs, nombreHoja, titulo, subtitulo)) {
                    exportado = false;
                    DknConsole.msgIsOk(false);
                }
                else {
                    DknConsole.msgIsOk(true);
                }

                // Reporte de facturas con saldo hasta la fecha indicada
                reportCode = "INVOICE_WITH_BALANCE";
                sqlRep = getSql(reportCode);

                sqlRep = sqlRep.replace("FECHA_HASTA", dateFinal);
                DknConsole.msg(Thread.currentThread().getStackTrace()[1].toString(), "Exportando a Excel. Facturas con Saldo. Sql: " + sqlRep + "...");

                nombreHoja = "Fac Saldo";
                titulo = "Facturas con Saldo";
                subtitulo = "Hasta: " + dateFinal;
                
                rs = stmt.executeQuery(sqlRep);
                if (!e.addResultSetAExcel(rs, nombreHoja, titulo, subtitulo)) {
                    exportado = false;
                    DknConsole.msgIsOk(false);
                }
                else {
                    DknConsole.msgIsOk(true);
                }

                e.save();
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(WClosingCash.class.getName()).log(Level.SEVERE, null, ex);
                exportado = false;
            }
            
            
            if (exportado) {
                JOptionPane.showMessageDialog(this, "Exportado a: " + fileXls.getAbsolutePath(), "Confirmacion", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                JOptionPane.showMessageDialog(this, "No exportado", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } // Fin if fileSls != null
        else {
            VError.show(this, "Ningun archivo seleccionado.");
        }
    }//GEN-LAST:event_btnToExcelActionPerformed

    private void cmbPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPeriodoActionPerformed
        String sel = (String) cmbPeriodo.getSelectedItem();
        if (sel == null || sel.isEmpty())
            return;
        
        int year = DateTime.getYear(DateTime.getNow());
        int month = DateTime.getMonth(DateTime.getNow());
//        int day = DateTime.getDay(DateTime.getNow());
//        int yearInit, monthInit, dayInit, yearFinal, monthFinal, dayFinal;
        
        Calendar c = Calendar.getInstance();
        java.util.Date dateInit, dateFinal;
        java.util.Date dateNow = DateTime.getNow();
        c.setTime(dateNow);
        
        switch (sel) {
            case "Hoy":
                jdcFechaDesde.setDate(dateNow);
                jdcFechaHasta.setDate(dateNow);
                break;
            case "Ayer":
                c.add(Calendar.DAY_OF_YEAR, -1);
                dateInit = c.getTime();
                dateFinal = dateInit;
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Ultima semana":
                c.add(Calendar.DAY_OF_YEAR, -7);
                dateInit = c.getTime();
                dateFinal = dateNow;
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Este mes":
                c.set(Calendar.DATE, 1);
                dateInit = c.getTime();
                dateFinal = dateNow;
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Mes anterior":
                c.set(Calendar.DATE, 1);
                c.add(Calendar.MONTH, -1);
                dateInit = c.getTime();
                c.setTime(dateNow);
                c.set(Calendar.DATE, 1);
                c.add(Calendar.DATE, -1);
                dateFinal = c.getTime();
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Este a√±o":
                c.set(Calendar.DATE, 1);
                c.set(Calendar.MONTH, 0);
                dateInit = c.getTime();
                dateFinal = dateNow;
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "A futuro":
                dateInit = dateNow;
                c.add(Calendar.YEAR, 10);
                c.set(Calendar.MONTH, 0);
                c.set(Calendar.DATE, 1);
                c.add(Calendar.DATE, -1);
                dateFinal = c.getTime();
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Enero":
                if (month < 0) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(1, year);
                dateFinal = DateTime.getDateLastDayMonth(1, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Febrero":
                if (month < 1) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(2, year);
                dateFinal = DateTime.getDateLastDayMonth(2, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Marzo":
                if (month < 2) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(3, year);
                dateFinal = DateTime.getDateLastDayMonth(3, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Abril":
                if (month < 3) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(4, year);
                dateFinal = DateTime.getDateLastDayMonth(4, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Mayo":
                if (month < 4) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(5, year);
                dateFinal = DateTime.getDateLastDayMonth(5, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Junio":
                if (month < 5) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(6, year);
                dateFinal = DateTime.getDateLastDayMonth(6, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Julio":
                if (month < 6) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(7, year);
                dateFinal = DateTime.getDateLastDayMonth(7, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Agosto":
                if (month < 7) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(8, year);
                dateFinal = DateTime.getDateLastDayMonth(8, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Septiembre":
                if (month < 8) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(9, year);
                dateFinal = DateTime.getDateLastDayMonth(9, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Octubre":
                if (month < 9) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(10, year);
                dateFinal = DateTime.getDateLastDayMonth(10, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Noviembre":
                if (month < 10) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(11, year);
                dateFinal = DateTime.getDateLastDayMonth(11, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            case "Diciembre":
                if (month < 11) {
                    year--;
                }
                dateInit = DateTime.getDateFisrtDayMonth(12, year);
                dateFinal = DateTime.getDateLastDayMonth(12, year);
                jdcFechaDesde.setDate(dateInit);
                jdcFechaHasta.setDate(dateFinal);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_cmbPeriodoActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnToExcel;
    private javax.swing.JButton btnToPdf;
    private javax.swing.JComboBox cmbPeriodo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.toedter.calendar.JDateChooser jdcFechaDesde;
    private com.toedter.calendar.JDateChooser jdcFechaHasta;
    private javax.swing.JLabel lblRange;
    private javax.swing.JPanel pnlCierreCaja;
    private javax.swing.JPanel pnlDepPendientes;
    private javax.swing.JPanel pnlDepSaldo;
    private javax.swing.JPanel pnlFactSaldo;
    private javax.swing.JTable tblCierreCaja;
    private javax.swing.JTable tblDepPendientes;
    private javax.swing.JTable tblDepSaldo;
    private javax.swing.JTable tblFacSaldo;
    private javax.swing.JTextField txtTotalAbonos;
    private javax.swing.JTextField txtTotalDocs;
    private javax.swing.JTextField txtTotalFacturas;
    // End of variables declaration//GEN-END:variables
}
